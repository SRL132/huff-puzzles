 
/** 
 *  CREATE HUFF EXERCISE
 *  
 *  The task is to deploy this contract with a function `makeContract()` which when called creates a contract
 *  that when called with any data returns `0xcaffe`.
 *  The call to `makeContract` should return the address of the newly created contract.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function makeContract() payable returns(address)

 #define macro MAKE_CONTRACT() = takes(0) returns (0){
    //https://www.evm.codes/playground?callValue=9&unit=Wei&codeType=Mnemonic&code=%27z0q0f9q9f0y4%20FFmslk3%200x63FFFFFFFF6000526004601CF3gvMSTORE~13~19gp%20%27~k%20z%2F%2F%20Createmnmccountjith%20yjeimnd%20v%5Cnqynolgg~pvCREATEm%20al%20codekvPUSH1j%20wg~0fpvvz%01fgjklmpqvyz~_

    //equivalent of: 
//[00]	PUSH1	0a    //code: 600a
//[02]	DUP1	          //code: 80
//[03]	PUSH1	09        //code: 6009
//[05]	PUSH0	          //code: 5f
//[06]	CODECOPY	      //code: 39
//[07]	PUSH0       	  //code: 5f
//[08]	RETURN	          //code: f3
//[09]	PUSH3	0caffe    //code: 620caffe
//[0d]	PUSH0       	  //code: 5f
//[0e]	MSTORE	          //code: 52
//[0f]	PUSH1	20        //code: 6020    
//[11]	PUSH0       	  //code: 5f
//[12]	RETURN            //code: f3

    0x600a8060095f395ff3620caffe5f5260205ff3 0x00 mstore 
    
    0x13 0x0d 0x00 // stack:[0x00, 0x0d (13 bytes), 0x13 (19 bytes)]
    create

    0x00 mstore // stack:[] store created contract's address in memory at offset zero
    0x20 0x00 return // return the address
 }

 #define macro MAIN() = takes(0) returns(0) {
       0x00
       calldataload
       0xE0
       shr
       __FUNC_SIG(makeContract) eq makeContract jumpi

         0x00 0x00 revert

         makeContract:
            MAKE_CONTRACT()

 }