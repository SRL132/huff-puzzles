
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function sumArray(uint256[]) payable returns(uint256)

//0x1fe457d7                                                         - function signature
//  0000000000000000000000000000000000000000000000000000000000000020 - offset of [1,2,3]
//  0000000000000000000000000000000000000000000000000000000000000003 - count for [1,2,3]
//  0000000000000000000000000000000000000000000000000000000000000001 - encoding of 1
//  0000000000000000000000000000000000000000000000000000000000000002 - encoding of 2
 // 0000000000000000000000000000000000000000000000000000000000000003 - encoding of 3
#define macro SUM_ARRAY() = takes(0) returns(0) {
    0x04 calldataload 0x04 add //[offset]  //  Q count offset+4
    dup1 calldataload //[length, offset]
    0x00 // [sum, length, offset]
    0x00 // [index, sum, length, offset]

    loop:
    dup1 dup4 eq ret jumpi   // [index, sum length, offset]  if length == index -> return
    0x01 add                 // [index+1, sum, length, offset]
    dup1 0x20 mul            // [index*32 gets you the element, index+1, sum, length, offset] 
    dup5 add calldataload    // [index*32 gets you the element, index+1, sum, length, offset]
    dup3 add swap2 pop // [index+1, new_sum, length, offset]
    loop jump

    ret:
    swap1 0x00 mstore  // [index, length, offset] store sum in memory at offset 0
    0x20 0x00 return
    //return sum
}


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr 

    dup1 __FUNC_SIG(sumArray) eq sumArray jumpi

    0x00 0x00 revert

    sumArray:
        SUM_ARRAY()
}