 /** 
 *  EMITTER HUFF EXERCISE
 *  
 *  The task is to enable this contract, when the function `value(uint256, uint256)` is called, should
 *  emit an event named `Value(uint256 indexed, uint256)`
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function value(uint256, uint256) payable returns()
 
 #define event Value(uint256 indexed, uint256)


 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    __FUNC_SIG(value) eq value jumpi

    0x00 0x00 revert

    value:
        VALUE()
 }

 #define macro VALUE() = takes(0) returns(0) {
       0x24 calldataload 0x00 mstore     //store second argument at memory slot 0
       0x04 calldataload       //[first_argument]
       __EVENT_HASH(Value)     //[event_hash, first_argument]
       0x20                    //[event_hash, first_argument, 20]
       0x00                    //[event_hash, first_argument, 20, 0]
       log2                    //[log(0, 20, first_argument, event_hash)]
 }
